// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: travel_book.proto

package travelbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelBookClient is the client API for TravelBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelBookClient interface {
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	ListFeature(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TravelBook_ListFeatureClient, error)
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TravelBook_RecordRouteClient, error)
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (TravelBook_RouteChatClient, error)
}

type travelBookClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelBookClient(cc grpc.ClientConnInterface) TravelBookClient {
	return &travelBookClient{cc}
}

func (c *travelBookClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/travelbook.TravelBook/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelBookClient) ListFeature(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TravelBook_ListFeatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &TravelBook_ServiceDesc.Streams[0], "/travelbook.TravelBook/ListFeature", opts...)
	if err != nil {
		return nil, err
	}
	x := &travelBookListFeatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TravelBook_ListFeatureClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type travelBookListFeatureClient struct {
	grpc.ClientStream
}

func (x *travelBookListFeatureClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *travelBookClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TravelBook_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &TravelBook_ServiceDesc.Streams[1], "/travelbook.TravelBook/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &travelBookRecordRouteClient{stream}
	return x, nil
}

type TravelBook_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type travelBookRecordRouteClient struct {
	grpc.ClientStream
}

func (x *travelBookRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *travelBookRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *travelBookClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (TravelBook_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TravelBook_ServiceDesc.Streams[2], "/travelbook.TravelBook/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &travelBookRouteChatClient{stream}
	return x, nil
}

type TravelBook_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type travelBookRouteChatClient struct {
	grpc.ClientStream
}

func (x *travelBookRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *travelBookRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TravelBookServer is the server API for TravelBook service.
// All implementations must embed UnimplementedTravelBookServer
// for forward compatibility
type TravelBookServer interface {
	GetFeature(context.Context, *Point) (*Feature, error)
	ListFeature(*Rectangle, TravelBook_ListFeatureServer) error
	RecordRoute(TravelBook_RecordRouteServer) error
	RouteChat(TravelBook_RouteChatServer) error
	mustEmbedUnimplementedTravelBookServer()
}

// UnimplementedTravelBookServer must be embedded to have forward compatible implementations.
type UnimplementedTravelBookServer struct {
}

func (UnimplementedTravelBookServer) GetFeature(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedTravelBookServer) ListFeature(*Rectangle, TravelBook_ListFeatureServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeature not implemented")
}
func (UnimplementedTravelBookServer) RecordRoute(TravelBook_RecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
}
func (UnimplementedTravelBookServer) RouteChat(TravelBook_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}
func (UnimplementedTravelBookServer) mustEmbedUnimplementedTravelBookServer() {}

// UnsafeTravelBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelBookServer will
// result in compilation errors.
type UnsafeTravelBookServer interface {
	mustEmbedUnimplementedTravelBookServer()
}

func RegisterTravelBookServer(s grpc.ServiceRegistrar, srv TravelBookServer) {
	s.RegisterService(&TravelBook_ServiceDesc, srv)
}

func _TravelBook_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelBookServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travelbook.TravelBook/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelBookServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelBook_ListFeature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TravelBookServer).ListFeature(m, &travelBookListFeatureServer{stream})
}

type TravelBook_ListFeatureServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type travelBookListFeatureServer struct {
	grpc.ServerStream
}

func (x *travelBookListFeatureServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _TravelBook_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TravelBookServer).RecordRoute(&travelBookRecordRouteServer{stream})
}

type TravelBook_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type travelBookRecordRouteServer struct {
	grpc.ServerStream
}

func (x *travelBookRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *travelBookRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TravelBook_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TravelBookServer).RouteChat(&travelBookRouteChatServer{stream})
}

type TravelBook_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type travelBookRouteChatServer struct {
	grpc.ServerStream
}

func (x *travelBookRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *travelBookRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TravelBook_ServiceDesc is the grpc.ServiceDesc for TravelBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TravelBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "travelbook.TravelBook",
	HandlerType: (*TravelBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _TravelBook_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeature",
			Handler:       _TravelBook_ListFeature_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _TravelBook_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _TravelBook_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "travel_book.proto",
}
